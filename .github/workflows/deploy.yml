---
name: Deploy

on:
  workflow_dispatch:
    inputs:
      reason:
        required: false
        description: 'Reason for running this workflow'
  push:
    branches:
      - main
    # Don't trigger if it's just a documentation update
    paths-ignore:
      - '**.md'
      - '**.MD'
      - '**.yml'
      - 'LICENSE'
      - '.gitattributes'
      - '.gitignore'
      - '.dockerignore'
  workflow_call:
  repository_dispatch:
    types: build_on_dep_container_update

# Set workflow-wide environment variables
#  - REPO: repo name on dockerhub
#  - IMAGE: image name on dockerhub
env:
  DOCKERHUB_REPO: kx1t
  DOCKERHUB_IMAGE: radarvirtuel
  GHCR_IMAGE: sdr-enthusiasts/docker-radarvirtuel
  GHCR_REGISTRY: ghcr.io

jobs:

  workflow-dispatch:
    name: Triggered via Workflow Dispatch?
    # only run this step if workflow dispatch triggered
    # log the reason the workflow dispatch was triggered
    if: |
      github.event_name == 'workflow_dispatch' &&
      github.event.inputs.reason != ''
    runs-on: ubuntu-latest
    steps:
      - name: Log dispatch reason
        env:
          INPUTS_REASON: ${{ github.event.inputs.reason }}
        run: |
          echo "Workflow dispatch reason: $INPUTS_REASON"

  hadolint:
    name: Run hadolint against docker files
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Pull hadolint/hadolint:latest Image
        run: docker pull hadolint/hadolint:latest
      - name: Run hadolint against Dockerfiles
        run: docker run --rm -i -v "$PWD":/workdir --workdir /workdir --entrypoint hadolint hadolint/hadolint --ignore DL3015 --ignore DL3003 --ignore DL3006 --ignore DL3010 --ignore DL4001 --ignore DL3007 --ignore DL3008 --ignore SC2068 --ignore DL3007 --ignore SC1091 --ignore DL3013 --ignore DL3010 $(find . -type f -iname "Dockerfile*")

  deploy_ghcr_multiarch:
    name: Deploy ghcr.io (Multi-Arch)
    runs-on: ubuntu-latest
    steps:

      # Check out our code
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Log into ghcr (so we can push images)
      - name: Login to ghcr.io
        uses: docker/login-action@v2
        with:
          registry: ${{ env.GHCR_REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Get metadata from repo
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.GHCR_REGISTRY }}/${{ env.IMAGE_NAME }}

      # Set up QEMU for multi-arch builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      # Set up buildx for multi platform builds
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: image=moby/buildkit:v0.10.6

      # Build "latest"
      - name: Build & Push - latest
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          no-cache: true
          platforms: linux/amd64,linux/arm/v7,linux/arm64,linux/i386
          push: true
          tags: ghcr.io/${{ env.GHCR_IMAGE }}:latest
          labels: ${{ steps.meta.outputs.labels }}


  deploy_dockerhub_multiarch:
    name: Deploy to DockerHub (Multi-Arch)
    runs-on: ubuntu-latest

    steps:
      # Check out our code
      -
        name: Checkout
        uses: actions/checkout@v3

      # Log into docker hub (so we can push images)
      -
        name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Get metadata from repo
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.DOCKERHUB_REPO }}/${{ env.DOCKERHUB_IMAGE }}

      # Set up QEMU for multi-arch builds
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      # Set up buildx for multi platform builds
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: image=moby/buildkit:v0.10.6

      # Build "latest"
      -
        name: Build & Push - latest
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          no-cache: true
          platforms: linux/amd64,linux/arm/v7,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ env.DOCKERHUB_REPO }}/${{ env.DOCKERHUB_IMAGE }}:latest
          labels: ${{ steps.meta.outputs.labels }}
