#!/usr/bin/with-contenv bash
#shellcheck shell=bash

APPNAME="$(hostname)/imalive"
KEEPALIVE_ALIVE=600   # keepalive timer in seconds if previous run was fine
KEEPALIVE_DEAD=60     # keepalive timer in seconds if previous run failed
                      # dont make this shorter than 60 secs to allow services to be properly restarted after a failure
CONNECTION_TIMEOUT=10 # timeout when checking ability to connect using netcat
ALIVE=true
mkdir -p /run/imalive
touch /run/imalive/errors
echo "[$APPNAME][$(date)] Started as an s6 service"

# Source in the scripts from @Mikenye's healthchecks-framework so we can use them here
source /opt/healthchecks-framework/healthchecks.sh

while true
do
    [[ "$ALIVE" == "true" ]] && KEEPALIVE=$KEEPALIVE_ALIVE || KEEPALIVE=$KEEPALIVE_DEAD
    if [[ "$VERBOSE" == "ON" ]]
    then
        echo "[$APPNAME][$(date)] ImAlive watchdog will sleep for $KEEPALIVE secs"
    else
        [[ "$ALIVE" != "true" ]] && echo "[$APPNAME][$(date)] Shortened ImAlive watchdog ($KEEPALIVE secs) because of errors during last run"
    fi
    sleep $KEEPALIVE
    [[ "$VERBOSE" == "ON" ]] && echo "[$APPNAME][$(date)] Running ImAlive..."

    ALIVE=true
    host=$HOSTNAME ;
    set $host;
    # kx1t: retrieve station name from $FEEDER_KEY docker env variable
    st=${FEEDER_KEY%%:*}
    timestamp=$(date "+%s")
    #echo " $st Current Time : $ts"
    STATUS=$(curl -s ${RV_SERVER%%:*}/rtools/pyalive.php?stid=$st)
    status="${STATUS%%-*}"
    remote_timestamp="${STATUS##*-}"

    # check the ImAlive server:
    if grep -o "404 Not Found" <<< "$STATUS" >/dev/null 2>&1;
    then
        echo  "[$APPNAME][$(date)] Server returned 404-Not Found. Restarting ANFeeder \"just in case\"..."
        killall /home/py/ANfeeder >/dev/null 2>&1
        ALIVE="404 failure for ${RV_SERVER%%:*}/rtools/pyalive.php?stid=$st"
    elif [[ -z  $STATUS ]]
    then
        echo  "[$APPNAME][$(date)] No Network failure. Restarting ANFeeder \"just in case\"..."
        killall /home/py/ANfeeder >/dev/null 2>&1
        ALIVE="no network failure"
    elif [[ $timestamp -lt $(( remote_timestamp - 10 )) ]]
    then
        # kx1t: using s6 to restart the service instead of the RestartANfeeder.sh script
        echo "[$APPNAME][$(date)] Time stamp discrepancy: local $(date -d @$timestamp) / remote $(date -d @$remote_timestamp); restarting ANfeeder"
        # kx1t: added warning that Docker image cannot resync NTP
        echo "[$APPNAME][$(date)] Warning - Feeder script would like to resync NTP, but this cannot done from within a Docker container."
        echo "[$APPNAME][$(date)] Warning - Please make sure your host machine uses an accurate external time source!"
        killall /home/py/ANfeeder >/dev/null 2>&1
        ALIVE="time discrepancy failure"
    elif [[ "$status" == "ko" ]]
    then
        # kx1t: using s6 to restart the service
        echo "[$APPNAME][$(date)] Server says that no data is received: Restarting ANfeeder"
        killall /home/py/ANfeeder >/dev/null 2>&1
        ALIVE="no data received by server failure"
        # /usr/bin/RestartANfeeder.sh;
    else
        [[ "$VERBOSE" == "ON" ]] && echo "[$APPNAME][$(date)] Server connection is fine! "
    fi

    # check the SOURCE_HOST connection
    # if ! check_tcp4_connection_established ANY ANY $(get_ipv4 ${SOURCE_HOST%%:*}) ${SOURCE_HOST##*:} >/dev/null 2>&1
    if [[ $(timeout --preserve-status $CONNECTION_TIMEOUT netcat -z -v ${SOURCE_HOST%%:*} ${SOURCE_HOST##*:} 2>/dev/null ; echo $?) != "0" ]]
    then
        echo "[$APPNAME][$(date)] You data source at $SOURCE_HOST appears to be down. Restarting ANfeeder."
        killall /home/py/ANfeeder >/dev/null 2>&1
        ALIVE="cannot establish connection to SOURCE HOST $SOURCE_HOST"
    else
        [[ "$VERBOSE" == "ON" ]] && echo "[$APPNAME][$(date)] $SOURCE_HOST can be reached! "
    fi

    # check if the RV_SERVER can be reached
    # Note - in the future we have to revisit this. `netcat -u` relies on ICMP Not Available messages from a UDP port to be
    # returned in case of failure, and often these messages are not sent or are filtered on the way back.
    # See https://serverfault.com/a/416269 for explanation
    #
    # if ! check_udp4_connection_established ANY ANY $(get_ipv4 ${RV_SERVER%%:*}) ${RV_SERVER##*:} >/dev/null 2>&1
    if [[ $(timeout --preserve-status $CONNECTION_TIMEOUT netcat -u -z -v ${RV_SERVER%%:*} ${RV_SERVER##*:} 2>/dev/null ; echo $?) != "0" ]]
    then
        echo "[$APPNAME][$(date)] The RadarVirtuel server at $RV_SERVER appears to be down. Restarting ANfeeder."
        killall /home/py/ANfeeder >/dev/null 2>&1
        ALIVE="$RV_SERVER down failure"
    else
        [[ "$VERBOSE" == "ON" ]] && echo "[$APPNAME][$(date)] $RV_SERVER can be reached! "
    fi

    [[ "$ALIVE" != "true" ]] && echo "$(date +%s) - $ALIVE" >> /run/imalive/errors || echo "" > /run/imalive/errors
done
