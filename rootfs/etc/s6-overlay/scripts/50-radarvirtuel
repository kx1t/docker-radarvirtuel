#!/command/with-contenv bash
# shellcheck shell=bash disable=SC1091,SC2015,SC2145

source /scripts/common

APPNAME="50-radarvirtuel"

[[ "$RV_SERVER" == "" ]] && RV_SERVER="mg22.adsbnetwork.com:50050" || true
if [[ "${RV_SERVER%%:*}" == "mg2.adsbnetwork.com" ]]
then
  RV_SERVER="mg22.adsbnetwork.com:${RV_SERVER##*:}"
  s6wrap --quiet --prepend="${APPNAME}" --timestamps --args cat <<EOF
+------------------------------------------------------------------------+
| ATTENTION! RV_SERVER mg2.adsbnetwork.com will be retired.              |
| Please update the RV_SERVER parameter in docker-compose.yml            |
| to: "mg22.adsbnetwork.com:${RV_SERVER##*:}".                           |
| We will use mg22.adsbnetwork.com for this session.                     |
+------------------------------------------------------------------------+
EOF
fi

[[ "$RV_SERVER" == "" ]] && RV_SERVER="mg2.adsbnetwork.com:50050"

s6wrap --quiet --prepend="${APPNAME}" --timestamps --args echo "Initializing RadarVirtuel..."
if chk_enabled "${VERBOSE}"; then
  s6wrap --quiet --prepend="${APPNAME}" --timestamps --args cat <<EOF
Feeder key:          ${FEEDER_KEY}
Source host:         ${SOURCE_HOST}
RadarVirtuel Server: ${RV_SERVER}
Verbose:             ${VERBOSE}
EOF
fi

# Get the correct version of ANfeeder in place:
if [[ ! -f /home/py/ANfeeder-raspy-$(dpkg --print-architecture) ]]; then
  s6wrap --quiet --prepend="${APPNAME}" --timestamps --args echo "ERROR: target architecture not supported for $(dpkg --print-architecture) ! Container execution stopped."
  exit 1
else
  ln -sf "/home/py/ANfeeder-raspy-$(dpkg --print-architecture)" /home/py/ANfeeder
fi
if chk_enabled "${VERBOSE}"; then
  s6wrap --quiet --prepend="${APPNAME}" --timestamps --args echo "Architecture:        $(dpkg --print-architecture) (supported)"
fi

# Let's do some checks to make sure the parameters look good, at least format-wise:
# check FEEDER_KEY
keyhash="${FEEDER_KEY##*:}"
stid="${FEEDER_KEY%%:*}"
if [[ ! ${keyhash}  =~ ^[a-fA-F0-9]{32}$ ]] || [[ ! ${stid} =~ [^0-9A-Za-z]* ]] || [[ "${#stid}" -gt "6" ]] || [[ "${#stid}" -lt "4" ]]; then
  s6wrap --quiet --prepend="${APPNAME}" --timestamps --args cat <<EOF
|--------------------------------------|
|               STOP !!!!              |
|                                      |
| Your feeder key format is incorrect! |
|                                      |
|--------------------------------------|
It should consist of:
- 4-6 letters or numbers (you entered "${stid}", which has ${#stid} characters)
- followed by a single : (which you did$( [[ "${FEEDER_KEY}" != *:* ]] && echo -n " NOT" || true)" enter)
- followed by 32 hexadecimal numbers [0-9A-F] (you entered \"${keyhash}\", which has ${#keyhash} characters$( [[ ! ${keyhash}  =~ ^[a-fA-F0-9]*$ ]] && echo " and which contains illegal characters" || true).

Please add the correct FEEDER_KEY parameter to your docker-compose.yml file and restart the container.
Container halted
EOF
    exit 1
fi

# Now check SOURCE_HOST
while [[ $(timeout --preserve-status 10 netcat -z -v "${SOURCE_HOST%%:*}" "${SOURCE_HOST##*:}" 2>/dev/null ; echo $?) != "0" ]]
do
  s6wrap --quiet --prepend="${APPNAME}" --timestamps --args cat <<EOF
---------------------------------------------------------------
While testing the SOURCE_HOST parameter, we ran into trouble:
We cannot reach ${SOURCE_HOST%%:*} on port ${SOURCE_HOST##*:}.
We will retry every 10 seconds. If this error keeps on repeating, please make sure that
readsb/dump1090[-fa]/tar1090 is running and producing RAW (AVR) data on port ${SOURCE_HOST##*:}!

If you see this only a few times at startup, and then not again, then you can ignore
this as it is probably related to your SOURCE_HOST launching.

Another hint: SOURCE_HOST in docker-compose.yml cannot point at 127.0.0.1. You MUST use
a name or a real IP address, for example "readsb:30002" or "192.168.0.99:30002".
EOF
    sleep 10
done
if chk_enabled "${VERBOSE}"; then
    s6wrap --quiet --prepend="${APPNAME}" --timestamps --args cat <<EOF
---------------------------------------------------------------
SOURCE_HOST checked. Connection can be established at $SOURCE_HOST
EOF
fi

# Last, check RV_SERVER -- check for UDP connection success
while [[ $(timeout --preserve-status 10 netcat -u -z -v "${RV_SERVER%%:*}" "${RV_SERVER##*:}" 2>/dev/null ; echo $?) != "0" ]]
do
  s6wrap --quiet --prepend="${APPNAME}" --timestamps --args cat <<EOF
---------------------------------------------------------------
While testing the RV_SERVER parameter, we ran into trouble:
We cannot reach ${RV_SERVER%%:*} on port ${RV_SERVER##*:}.
We will retry every 10 seconds. If this error keeps on repeating, please
make sure that your internet connection is still working.
EOF
  sleep 10
done

if chk_enabled "${VERBOSE}"; then
  s6wrap --quiet --prepend="${APPNAME}" --timestamps --args cat <<EOF
---------------------------------------------------------------
RV_SERVER checked. Connection can be established at ${RV_SERVER}
We are now starting the ANfeeder process
EOF
fi

  s6wrap --quiet --prepend="${APPNAME}" --timestamps --args echo "RadarVirtuel initialization complete."
