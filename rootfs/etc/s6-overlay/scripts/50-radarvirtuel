#!/command/with-contenv bash
# shellcheck shell=bash disable=SC1091,SC2015,SC2145,SC2154

#---------------------------------------------------------------------------------------------
# Copyright (C) 2023-2024, Ramon F. Kolb (kx1t) and contributors
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation, either version 3 of the License, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with this program.
# If not, see <https://www.gnu.org/licenses/>.
#---------------------------------------------------------------------------------------------

source /scripts/common
"${s6wrap[@]}" echo "Initializing RadarVirtuel..."

if [[ "${RV_SERVER%%:*}" == "mg2.adsbnetwork.com" ]]; then
  RV_SERVER="mg22.adsbnetwork.com:${RV_SERVER##*:}"
  "${s6wrap[@]}" cat <<EOF
+------------------------------------------------------------------------+
| ATTENTION! RV_SERVER mg2.adsbnetwork.com will be retired.              |
| Please remove the RV_SERVER parameter from  docker-compose.yml         |
| We will use mg22.adsbnetwork.com for this session.                     |
+------------------------------------------------------------------------+
EOF
fi
RV_SERVER="${RV_SERVER:-mg22.adsbnetwork.com:50050}"
# check if we are in one of the defined zones, and update the server address accordingly:
source /home/zonetable
if [[ -n "$zone_id" ]]; then
  RV_SERVER="${zone_dns}:${zone_port}"
  "${s6wrap[@]}" cat <<EOF
Server and port have been updated automatically based on the LAT/LON of the receiver:
Zone ID    : $zone_id
Zone Name  : $zone_name
ADSB Server: $zone_dns:$zone_port
MLAT Server: $zone_mlat
------------------
EOF
else
  "${s6wrap[@]}" cat <<EOF
ADSB Server: $RV_SERVER
MLAT Server: ${MLAT_HOST:-${SOURCE_HOST%%:*}:30005}
EOF
fi

if chk_enabled "${VERBOSE}"; then
  "${s6wrap[@]}" cat <<EOF
Feeder Key : ${FEEDER_KEY}
ADSB Source: ${SOURCE_HOST}
MLAT Source: ${MLAT_HOST:-${SOURCE_HOST%%:*}:30005}
Verbose    : ${VERBOSE}
EOF
fi

# Following code is no longer necessary as ANfeeder is now built at container build time
# Get the correct version of ANfeeder in place
#if [[ ! -f /home/py/ANfeeder-raspy-$(dpkg --print-architecture) ]]; then
#  "${s6wrap[@]}" echo "ERROR: target architecture not supported for $(dpkg --print-architecture) ! Container execution stopped."
#  exit 1
#else
#  ln -sf "/home/py/ANfeeder-raspy-$(dpkg --print-architecture)" /home/py/ANfeeder
#fi

if chk_enabled "${VERBOSE}"; then
  "${s6wrap[@]}" echo "Sys Arch   : $(dpkg --print-architecture) (supported)"
fi

# Let's do some checks to make sure the parameters look good, at least format-wise:
# check FEEDER_KEY
keyhash="${FEEDER_KEY##*:}"
stid="${FEEDER_KEY%%:*}"
if [[ ! ${keyhash}  =~ ^[a-fA-F0-9]{32}$ ]] || [[ ! ${stid} =~ [^0-9A-Za-z]* ]] || [[ "${#stid}" -lt "4" ]]; then
  "${s6wrap[@]}" cat <<EOF
|--------------------------------------|
|               STOP !!!!              |
|                                      |
| Your feeder key format is incorrect! |
|                                      |
|--------------------------------------|
It should consist of:
- 4-6 letters or numbers (you entered "${stid}", which has ${#stid} characters)
- followed by a single : (which you did$( [[ "${FEEDER_KEY}" != *:* ]] && echo -n " NOT" || true)" enter)
- followed by 32 hexadecimal numbers [0-9A-F] (you entered \"${keyhash}\", which has ${#keyhash} characters$( [[ ! ${keyhash}  =~ ^[a-fA-F0-9]*$ ]] && echo " and which contains illegal characters" || true).

Please add the correct FEEDER_KEY parameter to your docker-compose.yml file and restart the container.
Container halted
EOF
    exit 1
fi

# Now check SOURCE_HOST
while [[ $(timeout --preserve-status 10 netcat -z -v "${SOURCE_HOST%%:*}" "${SOURCE_HOST##*:}" 2>/dev/null ; echo $?) != "0" ]]
do
  "${s6wrap[@]}" cat <<EOF
---------------------------------------------------------------
While testing the SOURCE_HOST parameter, we ran into trouble:
We cannot reach ${SOURCE_HOST%%:*} on port ${SOURCE_HOST##*:}.
We will retry every 10 seconds. If this error keeps on repeating, please make sure that
readsb/dump1090[-fa]/tar1090 is running and producing RAW (AVR) data on port ${SOURCE_HOST##*:}!

If you see this only a few times at startup, and then not again, then you can ignore
this as it is probably related to your SOURCE_HOST launching.

Another hint: SOURCE_HOST in docker-compose.yml cannot point at 127.0.0.1. You MUST use
a name or a real IP address, for example "readsb:30002" or "192.168.0.99:30002".
EOF
    sleep 10
done
if chk_enabled "${VERBOSE}"; then
    "${s6wrap[@]}" cat <<EOF
---------------------------------------------------------------
SOURCE_HOST checked. Connection can be established at $SOURCE_HOST
EOF
fi

# Last, check RV_SERVER -- check for UDP connection success
while [[ $(timeout --preserve-status 10 netcat -u -z -v "${RV_SERVER%%:*}" "${RV_SERVER##*:}" 2>/dev/null ; echo $?) != "0" ]]
do
  "${s6wrap[@]}" cat <<EOF
---------------------------------------------------------------
While testing the RV_SERVER parameter, we ran into trouble:
We cannot reach ${RV_SERVER%%:*} on port ${RV_SERVER##*:}.
We will retry every 10 seconds. If this error keeps on repeating, please
make sure that your internet connection is still working.
EOF
  sleep 10
done

if chk_enabled "${VERBOSE}"; then
  "${s6wrap[@]}" cat <<EOF
---------------------------------------------------------------
RV_SERVER checked. Connection can be established at ${RV_SERVER}
We are now starting the ANfeeder process
EOF
fi

  "${s6wrap[@]}" echo "RadarVirtuel initialization complete."
