#!/command/with-contenv bash
# shellcheck shell=bash disable=SC1091,SC2015,SC2145,SC2154

source /scripts/common

while [[ -f /run/zonetable.lock ]]; do sleep 1; done
touch /run/zonetable.lock
source /home/zonetable
rm -f /run/zonetable.lock

KEEPALIVE_ALIVE="${KEEPALIVE_ALIVE:-600}"     # keepalive timer in seconds if previous run was fine
KEEPALIVE_DEAD="${KEEPALIVE_DEAD:-60}"        # keepalive timer in seconds if previous run failed
                                              # dont make this shorter than 60 secs to allow services to be properly restarted after a failure
CONNECTION_TIMEOUT="{CONNECTION_TIMEOUT:-10}" # timeout when checking ability to connect using netcat
ALIVE=true
mkdir -p /run/imalive
touch /run/imalive/errors
"${s6wrap[@]}" echo "Started as an s6 service"

RV_SERVER="${RV_SERVER:-mg22.adsbnetwork.com:50050}"
FALLBACK_IMALIVE_SERVICE="${FALLBACK_IMALIVE_SERVICE:-http://mg22.adsbnetwork.com/rtools/pyalive.php}"
[[ "${RV_SERVER%%:*}" == "mg2.adsbnetwork.com" ]] && RV_SERVER="mg22.adsbnetwork.com:${RV_SERVER##*:}" || true

if [[ -n "$zone_id" ]]; then
  RV_SERVER="${zone_dns}:${zone_port}"
fi

# Source in the scripts from @Mikenye's healthchecks-framework so we can use them here
source /opt/healthchecks-framework/healthchecks.sh

while true
do
    if [[ "${ALIVE}" == "true" ]]; then
        KEEPALIVE=$KEEPALIVE_ALIVE
    else
        KEEPALIVE=$KEEPALIVE_DEAD
    fi

    if chk_enabled "${VERBOSE}"; then
        "${s6wrap[@]}" echo "ImAlive watchdog will sleep for $KEEPALIVE secs"
    elif [[ "${ALIVE}" != "true" ]]; then
        "${s6wrap[@]}" echo "Shortened ImAlive watchdog ($KEEPALIVE secs) because of errors during last run"
    fi
    sleep "${KEEPALIVE}"
    if chk_enabled "${VERBOSE}"; then
        "${s6wrap[@]}" echo "Running ImAlive..."
    fi

    ALIVE=true
    # kx1t: retrieve station name from $FEEDER_KEY docker env variable
    st=${FEEDER_KEY%%:*}
    timestamp=$(date "+%s")

    if ! chk_disabled "${FALLBACK_IMALIVE_SERVICE}"; then
      if ! STATUS="$(curl -sSL "${RV_SERVER%%:*}"/rtools/pyalive.php?stid="${st,,}" 2>&1)"; then 
          if STATUS="$(curl -sSL "${FALLBACK_IMALIVE_SERVICE}"?stid="${st,,}" 2>&1)"; then
              "${s6wrap[@]}" echo "ImAlive status on ${RV_SERVER%%:*} wasn't available, fell back to mg22.adsbnetwork.com"
          else
              STATUS=""
          fi
      fi
      # STATUS now contains either "ok-12345678" or "ko-12345678"
      # If STATUS is empty then there was a connection error
      # where ok/ko means OK or not OK and 12345678 is the secs since epoch
      # STATUS can also contain the error page if the server returns an error

      status="${STATUS%%-*}"
      remote_timestamp="${STATUS##*-}"

      # check the ImAlive server:
      if grep -o "404 Not Found" <<< "$STATUS" >/dev/null 2>&1; then
        "${s6wrap[@]}" echo "ImAlive Server returned 404-Not Found. Restarting ANFeeder \"just in case\"..."
        ALIVE="404 failure for ${RV_SERVER%%:*}/rtools/pyalive.php?stid=$st"
      elif [[ -z  "$STATUS" ]]; then
         "${s6wrap[@]}" echo "ImAlive Server cannot be reached: network failure. Restarting ANFeeder \"just in case\"..."
        ALIVE="no network failure"
      elif [[ $timestamp -lt $(( remote_timestamp - 10 )) ]]; then
        # kx1t: using killall to restart the service instead of the RestartANfeeder.sh script
         "${s6wrap[@]}" echo "ImAlive Server: time stamp discrepancy: local $(date -d @"$timestamp") / remote $(date -d @"$remote_timestamp"); restarting ANfeeder"
        # kx1t: added warning that Docker image cannot resync NTP
         "${s6wrap[@]}" echo "Warning - Please make sure your host machine uses an accurate external time source!"
        ALIVE="time discrepancy failure"
      elif [[ "$status" == "ko" ]]; then
        # kx1t: using s6 to restart the service
        "${s6wrap[@]}" echo "ImAlive Server says that no data is received: Restarting ANfeeder"
        ALIVE="no data received by server failure"
      elif [[ "$status" == "ok" ]]; then
        chk_enabled "${VERBOSE}" && "${s6wrap[@]}" echo "ImAlive Server: connection is fine!"
      else
        "${s6wrap[@]}" echo "ImAlive error: $STATUS. Restarting ANfeeder"
        ALIVE="$STATUS"
      fi
    else
      "${s6wrap[@]}" echo "Server Check-in is disabled - skipped querying ${RV_SERVER%%:*}"
    fi

    # check the SOURCE_HOST connection
    if [[ "$(grep captured <<< "$(timeout --preserve-status 3 tcpdump -p src "${SOURCE_HOST%%:*}" and port "${SOURCE_HOST##*:}" 2>/dev/stdout 1>/dev/null)" | awk '{print $1}')" == "0" ]]; then
        "${s6wrap[@]}" echo "Your data source at $SOURCE_HOST appears to be down. Restarting ANfeeder"
        ALIVE="cannot establish connection to SOURCE HOST $SOURCE_HOST"
    else
        if chk_enabled "${VERBOSE}"; then "${s6wrap[@]}" echo "$SOURCE_HOST is sending data to the container"; fi
    fi

    # check if we see UDP data on the RV_SERVER port in 3 seconds, if that fails, try again for 30 secs
    # this is so the check will pass in 3 secs during times of high traffic, but we'll check for a longer period of time during low traffic
    if   [[ "$(grep captured <<< "$(timeout --preserve-status 3 tcpdump -p udp port "${RV_SERVER##*:}" 2>/dev/stdout 1>/dev/null)" | awk '{print $1}')" == "0" ]] \
      || [[ "$(grep captured <<< "$(timeout --preserve-status 30 tcpdump -p udp port "${RV_SERVER##*:}" 2>/dev/stdout 1>/dev/null)" | awk '{print $1}')" == "0" ]]; then
      "${s6wrap[@]}" echo "The container is not sending any data to the RadarVirtuel server at $RV_SERVER . Restarting ANfeeder"
      ALIVE="$RV_SERVER down failure"
    else
        if chk_enabled "${VERBOSE}"; then "${s6wrap[@]}" echo "The container is sending data to $RV_SERVER"; fi
    fi

    if [[ "$ALIVE" != "true" ]]; then
      killall /home/py/ANfeeder >/dev/null 2>&1 || true
      echo "$(date +%s) - $ALIVE" >> /run/imalive/errors
    else
      echo "" > /run/imalive/errors
    fi
done
