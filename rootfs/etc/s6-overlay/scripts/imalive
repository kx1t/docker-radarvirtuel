#!/command/with-contenv bash
# shellcheck shell=bash disable=SC1091,SC2015,SC2145,SC2154

source /scripts/common

KEEPALIVE_ALIVE=600   # keepalive timer in seconds if previous run was fine
KEEPALIVE_DEAD=60     # keepalive timer in seconds if previous run failed
                      # dont make this shorter than 60 secs to allow services to be properly restarted after a failure
CONNECTION_TIMEOUT=10 # timeout when checking ability to connect using netcat
ALIVE=true
mkdir -p /run/imalive
touch /run/imalive/errors
"${s6wrap[@]}" echo "Started as an s6 service"

RV_SERVER="${RV_SERVER:-mg22.adsbnetwork.com:50050}"
[[ "${RV_SERVER%%:*}" == "mg2.adsbnetwork.com" ]] && RV_SERVER="mg22.adsbnetwork.com:${RV_SERVER##*:}" || true

# Source in the scripts from @Mikenye's healthchecks-framework so we can use them here
source /opt/healthchecks-framework/healthchecks.sh

while true
do
    if [[ "${ALIVE}" == "true" ]]; then
        KEEPALIVE=$KEEPALIVE_ALIVE
    else
        KEEPALIVE=$KEEPALIVE_DEAD
    fi

    if chk_enabled "${VERBOSE}"; then
        "${s6wrap[@]}" echo "ImAlive watchdog will sleep for $KEEPALIVE secs"
    elif [[ "${ALIVE}" != "true" ]]; then
        "${s6wrap[@]}" echo "Shortened ImAlive watchdog ($KEEPALIVE secs) because of errors during last run"
    fi
    sleep "${KEEPALIVE}"
    if chk_enabled "${VERBOSE}"; then
        "${s6wrap[@]}" echo "Running ImAlive..."
    fi

    ALIVE=true
    # kx1t: retrieve station name from $FEEDER_KEY docker env variable
    st=${FEEDER_KEY%%:*}
    timestamp=$(date "+%s")
    #echo " $st Current Time : $ts"
    STATUS="$(curl -sSL "${RV_SERVER%%:*}"/rtools/pyalive.php?stid="${st,,}" 2>&1)" || true
    # STATUS now contains either "ok-12345678" or "ko-12345678"
    # where ok/ko means OK or not OK and 12345678 is the secs since epoch
    # STATUS can also contain the error page if the server returns an error

    status="${STATUS%%-*}"
    remote_timestamp="${STATUS##*-}"

    # check the ImAlive server:
    if grep -o "404 Not Found" <<< "$STATUS" >/dev/null 2>&1; then
         "${s6wrap[@]}" echo "ImAlive Server returned 404-Not Found. Restarting ANFeeder \"just in case\"..."
        killall /home/py/ANfeeder >/dev/null 2>&1
        ALIVE="404 failure for ${RV_SERVER%%:*}/rtools/pyalive.php?stid=$st"
    elif [[ -z  $STATUS ]]; then
         "${s6wrap[@]}" echo "ImAlive Server cannot be reached: network failure. Restarting ANFeeder \"just in case\"..."
        killall /home/py/ANfeeder >/dev/null 2>&1
        ALIVE="no network failure"
    elif [[ $timestamp -lt $(( remote_timestamp - 10 )) ]]; then
        # kx1t: using killall to restart the service instead of the RestartANfeeder.sh script
         "${s6wrap[@]}" echo "ImAlive Server: time stamp discrepancy: local $(date -d @"$timestamp") / remote $(date -d @"$remote_timestamp"); restarting ANfeeder"
        # kx1t: added warning that Docker image cannot resync NTP
         "${s6wrap[@]}" echo "Warning - Please make sure your host machine uses an accurate external time source!"
        killall /home/py/ANfeeder >/dev/null 2>&1
        ALIVE="time discrepancy failure"
    elif [[ "$status" == "ko" ]]; then
        # kx1t: using s6 to restart the service
        "${s6wrap[@]}" echo "ImAlive Server says that no data is received: Restarting ANfeeder"
        killall /home/py/ANfeeder >/dev/null 2>&1
        ALIVE="no data received by server failure"
    elif [[ "$status" == "ok" ]]; then
        chk_enabled "${VERBOSE}" && "${s6wrap[@]}" echo "ImAlive Server: connection is fine!"
    else
        "${s6wrap[@]}" echo "ImAlife error: $STATUS. Restarting ANfeeder"
        killall /home/py/ANfeeder >/dev/null 2>&1
        ALIVE="$STATUS"
    fi

    # check the SOURCE_HOST connection
    # if ! check_tcp4_connection_established ANY ANY $(get_ipv4 ${SOURCE_HOST%%:*}) ${SOURCE_HOST##*:} >/dev/null 2>&1
    # if [[ $(timeout --preserve-status $CONNECTION_TIMEOUT netcat -z -v "${SOURCE_HOST%%:*}" "${SOURCE_HOST##*:}" 2>/dev/null ; echo $?) != "0" ]]
    if [[ "$(grep captured <<< "$(timeout --preserve-status 3 tcpdump -p src "${SOURCE_HOST%%:*}" and port "${SOURCE_HOST##*:}" 2>/dev/stdout 1>/dev/null)" | awk '{print $1}')" == "0" ]]
    then
        "${s6wrap[@]}" echo "Your data source at $SOURCE_HOST appears to be down. Restarting ANfeeder."
        killall /home/py/ANfeeder >/dev/null 2>&1
        ALIVE="cannot establish connection to SOURCE HOST $SOURCE_HOST"
    else
        chk_enabled "${VERBOSE}"  && "${s6wrap[@]}" echo "$SOURCE_HOST can be reached! "
    fi

    # check if the RV_SERVER can be reached
    # Note - in the future we have to revisit this. `netcat -u` relies on ICMP Not Available messages from a UDP port to be
    # returned in case of failure, and often these messages are not sent or are filtered on the way back.
    # See https://serverfault.com/a/416269 for explanation
    #
    # In reality, false passes of this check aren't too important as we already pinged the ImAlive server to see that they think the connection is OK
    #
    # if ! check_udp4_connection_established ANY ANY $(get_ipv4 ${RV_SERVER%%:*}) ${RV_SERVER##*:} >/dev/null 2>&1
    if [[ $(timeout --preserve-status $CONNECTION_TIMEOUT netcat -u -z -v "${RV_SERVER%%:*}" "${RV_SERVER##*:}" 2>/dev/null ; echo $?) != "0" ]]
    then
        "${s6wrap[@]}" echo "The RadarVirtuel server at $RV_SERVER appears to be down. Restarting ANfeeder."
        killall /home/py/ANfeeder >/dev/null 2>&1
        ALIVE="$RV_SERVER down failure"
    else
        if chk_enabled "${VERBOSE}"; then
            "${s6wrap[@]}" echo "$RV_SERVER can be reached!"
        fi
    fi

    [[ "$ALIVE" != "true" ]] && echo "$(date +%s) - $ALIVE" >> /run/imalive/errors || echo "" > /run/imalive/errors
done
